{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBondry.js","Containers/App.js","action.js","constant.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","Robot","cardComponent","map","user","i","Components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBondry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","robots","isPending","filteredRobots","filter","toLowerCase","includes","Components_SearchBox","Components_Scroll","Components_ErrorBondry","Components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3597890.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Card({name, email, id}) {\r\n    \r\n    return(\r\n        \r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='Robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react'\r\n\r\nimport Card from './Card';\r\n\r\nfunction CardList({Robot}) {\r\n    \r\n    const cardComponent = Robot.map((user,i) => {\r\n        return <Card \r\n        key={i} \r\n        id={Robot[i].id} \r\n        name={Robot[i].name} \r\n        email={Robot[i].email}/>\r\n    });\r\n\r\n    return(\r\n<div> \r\n{cardComponent}\r\n\r\n     </div> \r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({searchfield, searchChange}){\r\n    return(\r\n   <div>\r\n    <input \r\n    className='pa3 ba b--green bg-lightest-blue'\r\n    type='search' \r\n    placeholder='search robots'\r\n    onChange={searchChange}\r\n    />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nfunction Scroll(props){\r\n    return(\r\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'500px'}}>\r\n        {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBondry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>oooops ! Thats not good...</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBondry;","import React , {Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBondry from '../Components/ErrorBondry';\r\nimport {connect} from 'react-redux';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../action';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n   return{\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n   componentDidMount(){\r\n       this.props.onRequestRobots();\r\n   }\r\n\r\n  render(){\r\n\r\n      const{searchField, onSearchChange, robots, isPending}=this.props;\r\n    const filteredRobots = robots.filter(Robot => {\r\n        return Robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ? <h1 className='f3 f1-m f-headline-l'>Loading...</h1>:\r\n       (\r\n            <div className='tc'>\r\n    <h1 className='f1-m f-headline-l'>Robo Friends</h1>\r\n    <hr></hr>\r\n    <SearchBox searchChange={onSearchChange}/>\r\n    <Scroll>\r\n    <ErrorBondry>\r\n    <CardList Robot={filteredRobots}/>\r\n    </ErrorBondry>\r\n    </Scroll>\r\n            </div>\r\n    \r\n        )\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constant'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n       .then(response=> response.json())\r\n       .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n       .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constant'\r\n\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={})=>{\r\n   switch (action.type) {\r\n       case CHANGE_SEARCH_FIELD:\r\n           return Object.assign({}, state, {\r\n               searchField:action.payload});\r\n       default:\r\n       return state;\r\n\r\n   }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    error: '',\r\n    robots: [],\r\n    isPending:false\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) =>{\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state, {error:action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {Provider} from 'react-redux';\nimport {createLogger} from 'redux-logger';\nimport * as serviceWorker from './serviceWorker';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducer';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\n\n ReactDOM.render(\n     <Provider store={store}>\n     <App />\n     </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}